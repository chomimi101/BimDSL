/**
 * generated by Xtext 2.10.0
 */
package org.dsl.bimchecker.bimmodel.impl;

import org.dsl.bimchecker.bimmodel.Aliass;
import org.dsl.bimchecker.bimmodel.Annotation;
import org.dsl.bimchecker.bimmodel.BimmodelPackage;
import org.dsl.bimchecker.bimmodel.Rule;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.dsl.bimchecker.bimmodel.impl.RuleImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.dsl.bimchecker.bimmodel.impl.RuleImpl#getAlialist <em>Alialist</em>}</li>
 *   <li>{@link org.dsl.bimchecker.bimmodel.impl.RuleImpl#getAnnoinfo <em>Annoinfo</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class RuleImpl extends MinimalEObjectImpl.Container implements Rule
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getAlialist() <em>Alialist</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAlialist()
   * @generated
   * @ordered
   */
  protected Aliass alialist;

  /**
   * The cached value of the '{@link #getAnnoinfo() <em>Annoinfo</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAnnoinfo()
   * @generated
   * @ordered
   */
  protected Annotation annoinfo;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return BimmodelPackage.Literals.RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BimmodelPackage.RULE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Aliass getAlialist()
  {
    return alialist;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAlialist(Aliass newAlialist, NotificationChain msgs)
  {
    Aliass oldAlialist = alialist;
    alialist = newAlialist;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BimmodelPackage.RULE__ALIALIST, oldAlialist, newAlialist);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAlialist(Aliass newAlialist)
  {
    if (newAlialist != alialist)
    {
      NotificationChain msgs = null;
      if (alialist != null)
        msgs = ((InternalEObject)alialist).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BimmodelPackage.RULE__ALIALIST, null, msgs);
      if (newAlialist != null)
        msgs = ((InternalEObject)newAlialist).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BimmodelPackage.RULE__ALIALIST, null, msgs);
      msgs = basicSetAlialist(newAlialist, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BimmodelPackage.RULE__ALIALIST, newAlialist, newAlialist));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Annotation getAnnoinfo()
  {
    return annoinfo;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetAnnoinfo(Annotation newAnnoinfo, NotificationChain msgs)
  {
    Annotation oldAnnoinfo = annoinfo;
    annoinfo = newAnnoinfo;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, BimmodelPackage.RULE__ANNOINFO, oldAnnoinfo, newAnnoinfo);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setAnnoinfo(Annotation newAnnoinfo)
  {
    if (newAnnoinfo != annoinfo)
    {
      NotificationChain msgs = null;
      if (annoinfo != null)
        msgs = ((InternalEObject)annoinfo).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - BimmodelPackage.RULE__ANNOINFO, null, msgs);
      if (newAnnoinfo != null)
        msgs = ((InternalEObject)newAnnoinfo).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - BimmodelPackage.RULE__ANNOINFO, null, msgs);
      msgs = basicSetAnnoinfo(newAnnoinfo, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, BimmodelPackage.RULE__ANNOINFO, newAnnoinfo, newAnnoinfo));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case BimmodelPackage.RULE__ALIALIST:
        return basicSetAlialist(null, msgs);
      case BimmodelPackage.RULE__ANNOINFO:
        return basicSetAnnoinfo(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case BimmodelPackage.RULE__NAME:
        return getName();
      case BimmodelPackage.RULE__ALIALIST:
        return getAlialist();
      case BimmodelPackage.RULE__ANNOINFO:
        return getAnnoinfo();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case BimmodelPackage.RULE__NAME:
        setName((String)newValue);
        return;
      case BimmodelPackage.RULE__ALIALIST:
        setAlialist((Aliass)newValue);
        return;
      case BimmodelPackage.RULE__ANNOINFO:
        setAnnoinfo((Annotation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case BimmodelPackage.RULE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case BimmodelPackage.RULE__ALIALIST:
        setAlialist((Aliass)null);
        return;
      case BimmodelPackage.RULE__ANNOINFO:
        setAnnoinfo((Annotation)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case BimmodelPackage.RULE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case BimmodelPackage.RULE__ALIALIST:
        return alialist != null;
      case BimmodelPackage.RULE__ANNOINFO:
        return annoinfo != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //RuleImpl
