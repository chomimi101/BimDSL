/*
 * generated by Xtext 2.10.0
 */
package org.dsl.bimchecker.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class BimmodelGrammarAccess extends AbstractGrammarElementFinder {
	
	public class BimmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.Bimmodel");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		////领域模型由0到多条规则组成
		//Bimmodel:
		//	rules+=Rule*;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=Rule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//Rule
		public RuleCall getRulesRuleParserRuleCall_0() { return cRulesRuleParserRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameObjectNameParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAlialistAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAlialistAliassParserRuleCall_2_0 = (RuleCall)cAlialistAssignment_2.eContents().get(0);
		private final Assignment cAnnoinfoAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnoinfoAnnotationParserRuleCall_3_0 = (RuleCall)cAnnoinfoAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		////每一条规则由规则名(ObjectName),别名集(Aliass),标注(Annotation)组成
		////且分别对应java类Rule的name,alialist,annoinfo属性成员
		////别名集有一个，标注最多有一个
		//Rule:
		//	name=ObjectName '{' alialist=Aliass annoinfo=Annotation? '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ObjectName '{' alialist=Aliass annoinfo=Annotation? '}'
		public Group getGroup() { return cGroup; }
		
		//name=ObjectName
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ObjectName
		public RuleCall getNameObjectNameParserRuleCall_0_0() { return cNameObjectNameParserRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//alialist=Aliass
		public Assignment getAlialistAssignment_2() { return cAlialistAssignment_2; }
		
		//Aliass
		public RuleCall getAlialistAliassParserRuleCall_2_0() { return cAlialistAliassParserRuleCall_2_0; }
		
		//annoinfo=Annotation?
		public Assignment getAnnoinfoAssignment_3() { return cAnnoinfoAssignment_3; }
		
		//Annotation
		public RuleCall getAnnoinfoAnnotationParserRuleCall_3_0() { return cAnnoinfoAnnotationParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class AliassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.Aliass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAliassAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAliassIFCNAMETerminalRuleCall_2_0 = (RuleCall)cAliassAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOrKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cAliassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cAliassIFCNAMETerminalRuleCall_3_1_0 = (RuleCall)cAliassAssignment_3_1.eContents().get(0);
		
		////别名由至少一个ifc专属名词(IFCNAME)组成
		////aliass对应于Aliass类的属性成员
		//Aliass:
		//	'alias' '=' aliass+=IFCNAME ('or' aliass+=IFCNAME)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'alias' '=' aliass+=IFCNAME ('or' aliass+=IFCNAME)*
		public Group getGroup() { return cGroup; }
		
		//'alias'
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//aliass+=IFCNAME
		public Assignment getAliassAssignment_2() { return cAliassAssignment_2; }
		
		//IFCNAME
		public RuleCall getAliassIFCNAMETerminalRuleCall_2_0() { return cAliassIFCNAMETerminalRuleCall_2_0; }
		
		//('or' aliass+=IFCNAME)*
		public Group getGroup_3() { return cGroup_3; }
		
		//'or'
		public Keyword getOrKeyword_3_0() { return cOrKeyword_3_0; }
		
		//aliass+=IFCNAME
		public Assignment getAliassAssignment_3_1() { return cAliassAssignment_3_1; }
		
		//IFCNAME
		public RuleCall getAliassIFCNAMETerminalRuleCall_3_1_0() { return cAliassIFCNAMETerminalRuleCall_3_1_0; }
	}
	public class AnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.Annotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAnnotationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnnotationNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnotationNameIDTerminalRuleCall_2_0 = (RuleCall)cAnnotationNameAssignment_2.eContents().get(0);
		private final Assignment cAnnodetailAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnnodetailAnnotationDetailParserRuleCall_3_0 = (RuleCall)cAnnodetailAssignment_3.eContents().get(0);
		
		////标注由标识符(ID)以及至多一个标注参数列表(AnnotationDetail)组成
		////annotationName,annodetail对应于Annotation类的属性成员
		//Annotation:
		//	'annotation' ':' annotationName=ID annodetail=AnnotationDetail?;
		@Override public ParserRule getRule() { return rule; }
		
		//'annotation' ':' annotationName=ID annodetail=AnnotationDetail?
		public Group getGroup() { return cGroup; }
		
		//'annotation'
		public Keyword getAnnotationKeyword_0() { return cAnnotationKeyword_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//annotationName=ID
		public Assignment getAnnotationNameAssignment_2() { return cAnnotationNameAssignment_2; }
		
		//ID
		public RuleCall getAnnotationNameIDTerminalRuleCall_2_0() { return cAnnotationNameIDTerminalRuleCall_2_0; }
		
		//annodetail=AnnotationDetail?
		public Assignment getAnnodetailAssignment_3() { return cAnnodetailAssignment_3; }
		
		//AnnotationDetail
		public RuleCall getAnnodetailAnnotationDetailParserRuleCall_3_0() { return cAnnodetailAnnotationDetailParserRuleCall_3_0; }
	}
	public class AnnotationDetailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.AnnotationDetail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAnnosAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAnnosSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cAnnosAssignment_1_0.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAnnosAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnnosSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnnosAssignment_2.eContents().get(0);
		
		////标注参数列表由一个或多个的字符串组成，后期还是封装成类似于ObjectName的规则进行限制
		////annos对应于AnnotationDetail类的属性成员
		//AnnotationDetail:
		//	'=' (annos+=STRING 'or')* annos+=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'=' (annos+=STRING 'or')* annos+=STRING
		public Group getGroup() { return cGroup; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//(annos+=STRING 'or')*
		public Group getGroup_1() { return cGroup_1; }
		
		//annos+=STRING
		public Assignment getAnnosAssignment_1_0() { return cAnnosAssignment_1_0; }
		
		//STRING
		public RuleCall getAnnosSTRINGTerminalRuleCall_1_0_0() { return cAnnosSTRINGTerminalRuleCall_1_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//annos+=STRING
		public Assignment getAnnosAssignment_2() { return cAnnosAssignment_2; }
		
		//STRING
		public RuleCall getAnnosSTRINGTerminalRuleCall_2_0() { return cAnnosSTRINGTerminalRuleCall_2_0; }
	}
	public class ObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.ObjectName");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		////实体标识符，考虑进行优化
		//ObjectName:
		//	STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	
	
	private final BimmodelElements pBimmodel;
	private final RuleElements pRule;
	private final AliassElements pAliass;
	private final AnnotationElements pAnnotation;
	private final AnnotationDetailElements pAnnotationDetail;
	private final ObjectNameElements pObjectName;
	private final TerminalRule tIFCNAME;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public BimmodelGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pBimmodel = new BimmodelElements();
		this.pRule = new RuleElements();
		this.pAliass = new AliassElements();
		this.pAnnotation = new AnnotationElements();
		this.pAnnotationDetail = new AnnotationDetailElements();
		this.pObjectName = new ObjectNameElements();
		this.tIFCNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.dsl.bimchecker.Bimmodel.IFCNAME");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.dsl.bimchecker.Bimmodel".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////领域模型由0到多条规则组成
	//Bimmodel:
	//	rules+=Rule*;
	public BimmodelElements getBimmodelAccess() {
		return pBimmodel;
	}
	
	public ParserRule getBimmodelRule() {
		return getBimmodelAccess().getRule();
	}
	
	////每一条规则由规则名(ObjectName),别名集(Aliass),标注(Annotation)组成
	////且分别对应java类Rule的name,alialist,annoinfo属性成员
	////别名集有一个，标注最多有一个
	//Rule:
	//	name=ObjectName '{' alialist=Aliass annoinfo=Annotation? '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	////别名由至少一个ifc专属名词(IFCNAME)组成
	////aliass对应于Aliass类的属性成员
	//Aliass:
	//	'alias' '=' aliass+=IFCNAME ('or' aliass+=IFCNAME)*;
	public AliassElements getAliassAccess() {
		return pAliass;
	}
	
	public ParserRule getAliassRule() {
		return getAliassAccess().getRule();
	}
	
	////标注由标识符(ID)以及至多一个标注参数列表(AnnotationDetail)组成
	////annotationName,annodetail对应于Annotation类的属性成员
	//Annotation:
	//	'annotation' ':' annotationName=ID annodetail=AnnotationDetail?;
	public AnnotationElements getAnnotationAccess() {
		return pAnnotation;
	}
	
	public ParserRule getAnnotationRule() {
		return getAnnotationAccess().getRule();
	}
	
	////标注参数列表由一个或多个的字符串组成，后期还是封装成类似于ObjectName的规则进行限制
	////annos对应于AnnotationDetail类的属性成员
	//AnnotationDetail:
	//	'=' (annos+=STRING 'or')* annos+=STRING;
	public AnnotationDetailElements getAnnotationDetailAccess() {
		return pAnnotationDetail;
	}
	
	public ParserRule getAnnotationDetailRule() {
		return getAnnotationDetailAccess().getRule();
	}
	
	////实体标识符，考虑进行优化
	//ObjectName:
	//	STRING;
	public ObjectNameElements getObjectNameAccess() {
		return pObjectName;
	}
	
	public ParserRule getObjectNameRule() {
		return getObjectNameAccess().getRule();
	}
	
	//terminal IFCNAME:
	//	"ifc" 'a'..'z'+;
	public TerminalRule getIFCNAMERule() {
		return tIFCNAME;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
