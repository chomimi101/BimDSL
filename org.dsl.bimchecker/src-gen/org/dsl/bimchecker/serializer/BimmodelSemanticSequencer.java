/*
 * generated by Xtext 2.10.0
 */
package org.dsl.bimchecker.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.dsl.bimchecker.bimmodel.Aliass;
import org.dsl.bimchecker.bimmodel.Annotation;
import org.dsl.bimchecker.bimmodel.AnnotationDetail;
import org.dsl.bimchecker.bimmodel.Bimmodel;
import org.dsl.bimchecker.bimmodel.BimmodelPackage;
import org.dsl.bimchecker.bimmodel.Rule;
import org.dsl.bimchecker.services.BimmodelGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class BimmodelSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BimmodelGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BimmodelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BimmodelPackage.ALIASS:
				sequence_Aliass(context, (Aliass) semanticObject); 
				return; 
			case BimmodelPackage.ANNOTATION:
				sequence_Annotation(context, (Annotation) semanticObject); 
				return; 
			case BimmodelPackage.ANNOTATION_DETAIL:
				sequence_AnnotationDetail(context, (AnnotationDetail) semanticObject); 
				return; 
			case BimmodelPackage.BIMMODEL:
				sequence_Bimmodel(context, (Bimmodel) semanticObject); 
				return; 
			case BimmodelPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Aliass returns Aliass
	 *
	 * Constraint:
	 *     (aliass+=IFCNAME aliass+=IFCNAME*)
	 */
	protected void sequence_Aliass(ISerializationContext context, Aliass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AnnotationDetail returns AnnotationDetail
	 *
	 * Constraint:
	 *     (annos+=STRING* annos+=STRING)
	 */
	protected void sequence_AnnotationDetail(ISerializationContext context, AnnotationDetail semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Annotation returns Annotation
	 *
	 * Constraint:
	 *     (annotationName=ID annodetail=AnnotationDetail?)
	 */
	protected void sequence_Annotation(ISerializationContext context, Annotation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Bimmodel returns Bimmodel
	 *
	 * Constraint:
	 *     rules+=Rule+
	 */
	protected void sequence_Bimmodel(ISerializationContext context, Bimmodel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (name=ObjectName alialist=Aliass annoinfo=Annotation?)
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
