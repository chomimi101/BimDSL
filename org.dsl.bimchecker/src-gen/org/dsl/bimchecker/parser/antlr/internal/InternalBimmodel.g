/*
 * generated by Xtext 2.10.0
 */
grammar InternalBimmodel;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.dsl.bimchecker.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.dsl.bimchecker.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.dsl.bimchecker.services.BimmodelGrammarAccess;

}

@parser::members {

 	private BimmodelGrammarAccess grammarAccess;

    public InternalBimmodelParser(TokenStream input, BimmodelGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Bimmodel";
   	}

   	@Override
   	protected BimmodelGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBimmodel
entryRuleBimmodel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBimmodelRule()); }
	iv_ruleBimmodel=ruleBimmodel
	{ $current=$iv_ruleBimmodel.current; }
	EOF;

// Rule Bimmodel
ruleBimmodel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBimmodelAccess().getRulesRuleParserRuleCall_0());
			}
			lv_rules_0_0=ruleRule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBimmodelRule());
				}
				add(
					$current,
					"rules",
					lv_rules_0_0,
					"org.dsl.bimchecker.Bimmodel.Rule");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	iv_ruleRule=ruleRule
	{ $current=$iv_ruleRule.current; }
	EOF;

// Rule Rule
ruleRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getNameObjectNameParserRuleCall_0_0());
				}
				lv_name_0_0=ruleObjectName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"name",
						lv_name_0_0,
						"org.dsl.bimchecker.Bimmodel.ObjectName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getAlialistAliassParserRuleCall_2_0());
				}
				lv_alialist_2_0=ruleAliass
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"alialist",
						lv_alialist_2_0,
						"org.dsl.bimchecker.Bimmodel.Aliass");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getRuleAccess().getAnnoinfoAnnotationParserRuleCall_3_0());
				}
				lv_annoinfo_3_0=ruleAnnotation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRuleRule());
					}
					set(
						$current,
						"annoinfo",
						lv_annoinfo_3_0,
						"org.dsl.bimchecker.Bimmodel.Annotation");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleAliass
entryRuleAliass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAliassRule()); }
	iv_ruleAliass=ruleAliass
	{ $current=$iv_ruleAliass.current; }
	EOF;

// Rule Aliass
ruleAliass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='alias'
		{
			newLeafNode(otherlv_0, grammarAccess.getAliassAccess().getAliasKeyword_0());
		}
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getAliassAccess().getEqualsSignKeyword_1());
		}
		(
			(
				lv_aliass_2_0=RULE_IFCNAME
				{
					newLeafNode(lv_aliass_2_0, grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAliassRule());
					}
					addWithLastConsumed(
						$current,
						"aliass",
						lv_aliass_2_0,
						"org.dsl.bimchecker.Bimmodel.IFCNAME");
				}
			)
		)
		(
			otherlv_3='or'
			{
				newLeafNode(otherlv_3, grammarAccess.getAliassAccess().getOrKeyword_3_0());
			}
			(
				(
					lv_aliass_4_0=RULE_IFCNAME
					{
						newLeafNode(lv_aliass_4_0, grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_3_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAliassRule());
						}
						addWithLastConsumed(
							$current,
							"aliass",
							lv_aliass_4_0,
							"org.dsl.bimchecker.Bimmodel.IFCNAME");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAnnotation
entryRuleAnnotation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationRule()); }
	iv_ruleAnnotation=ruleAnnotation
	{ $current=$iv_ruleAnnotation.current; }
	EOF;

// Rule Annotation
ruleAnnotation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='annotation'
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationAccess().getAnnotationKeyword_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getAnnotationAccess().getColonKeyword_1());
		}
		(
			(
				lv_annotationName_2_0=RULE_ID
				{
					newLeafNode(lv_annotationName_2_0, grammarAccess.getAnnotationAccess().getAnnotationNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnotationRule());
					}
					setWithLastConsumed(
						$current,
						"annotationName",
						lv_annotationName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getAnnotationAccess().getAnnodetailAnnotationDetailParserRuleCall_3_0());
				}
				lv_annodetail_3_0=ruleAnnotationDetail
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAnnotationRule());
					}
					set(
						$current,
						"annodetail",
						lv_annodetail_3_0,
						"org.dsl.bimchecker.Bimmodel.AnnotationDetail");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnnotationDetail
entryRuleAnnotationDetail returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAnnotationDetailRule()); }
	iv_ruleAnnotationDetail=ruleAnnotationDetail
	{ $current=$iv_ruleAnnotationDetail.current; }
	EOF;

// Rule AnnotationDetail
ruleAnnotationDetail returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='='
		{
			newLeafNode(otherlv_0, grammarAccess.getAnnotationDetailAccess().getEqualsSignKeyword_0());
		}
		(
			(
				(
					lv_annos_1_0=RULE_STRING
					{
						newLeafNode(lv_annos_1_0, grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAnnotationDetailRule());
						}
						addWithLastConsumed(
							$current,
							"annos",
							lv_annos_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getAnnotationDetailAccess().getOrKeyword_1_1());
			}
		)*
		(
			(
				lv_annos_3_0=RULE_STRING
				{
					newLeafNode(lv_annos_3_0, grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAnnotationDetailRule());
					}
					addWithLastConsumed(
						$current,
						"annos",
						lv_annos_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleObjectName
entryRuleObjectName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getObjectNameRule()); }
	iv_ruleObjectName=ruleObjectName
	{ $current=$iv_ruleObjectName.current.getText(); }
	EOF;

// Rule ObjectName
ruleObjectName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getObjectNameAccess().getSTRINGTerminalRuleCall());
	}
;

RULE_IFCNAME : 'ifc' ('a'..'z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
