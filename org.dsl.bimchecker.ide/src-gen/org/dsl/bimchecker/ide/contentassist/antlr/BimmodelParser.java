/*
 * generated by Xtext 2.10.0
 */
package org.dsl.bimchecker.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.dsl.bimchecker.ide.contentassist.antlr.internal.InternalBimmodelParser;
import org.dsl.bimchecker.services.BimmodelGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class BimmodelParser extends AbstractContentAssistParser {

	@Inject
	private BimmodelGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalBimmodelParser createParser() {
		InternalBimmodelParser result = new InternalBimmodelParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getAliassAccess().getGroup(), "rule__Aliass__Group__0");
					put(grammarAccess.getAliassAccess().getGroup_3(), "rule__Aliass__Group_3__0");
					put(grammarAccess.getAnnotationAccess().getGroup(), "rule__Annotation__Group__0");
					put(grammarAccess.getAnnotationDetailAccess().getGroup(), "rule__AnnotationDetail__Group__0");
					put(grammarAccess.getAnnotationDetailAccess().getGroup_1(), "rule__AnnotationDetail__Group_1__0");
					put(grammarAccess.getBimmodelAccess().getRulesAssignment(), "rule__Bimmodel__RulesAssignment");
					put(grammarAccess.getRuleAccess().getNameAssignment_0(), "rule__Rule__NameAssignment_0");
					put(grammarAccess.getRuleAccess().getAlialistAssignment_2(), "rule__Rule__AlialistAssignment_2");
					put(grammarAccess.getRuleAccess().getAnnoinfoAssignment_3(), "rule__Rule__AnnoinfoAssignment_3");
					put(grammarAccess.getAliassAccess().getAliassAssignment_2(), "rule__Aliass__AliassAssignment_2");
					put(grammarAccess.getAliassAccess().getAliassAssignment_3_1(), "rule__Aliass__AliassAssignment_3_1");
					put(grammarAccess.getAnnotationAccess().getAnnotationNameAssignment_2(), "rule__Annotation__AnnotationNameAssignment_2");
					put(grammarAccess.getAnnotationAccess().getAnnodetailAssignment_3(), "rule__Annotation__AnnodetailAssignment_3");
					put(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_1_0(), "rule__AnnotationDetail__AnnosAssignment_1_0");
					put(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_2(), "rule__AnnotationDetail__AnnosAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalBimmodelParser typedParser = (InternalBimmodelParser) parser;
			typedParser.entryRuleBimmodel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BimmodelGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BimmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
