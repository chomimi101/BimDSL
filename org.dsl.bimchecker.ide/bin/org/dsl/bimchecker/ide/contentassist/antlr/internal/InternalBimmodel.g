/*
 * generated by Xtext 2.10.0
 */
grammar InternalBimmodel;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.dsl.bimchecker.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.dsl.bimchecker.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.dsl.bimchecker.services.BimmodelGrammarAccess;

}
@parser::members {
	private BimmodelGrammarAccess grammarAccess;

	public void setGrammarAccess(BimmodelGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleBimmodel
entryRuleBimmodel
:
{ before(grammarAccess.getBimmodelRule()); }
	 ruleBimmodel
{ after(grammarAccess.getBimmodelRule()); } 
	 EOF 
;

// Rule Bimmodel
ruleBimmodel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBimmodelAccess().getRulesAssignment()); }
		(rule__Bimmodel__RulesAssignment)*
		{ after(grammarAccess.getBimmodelAccess().getRulesAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRule
entryRuleRule
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRuleAccess().getGroup()); }
		(rule__Rule__Group__0)
		{ after(grammarAccess.getRuleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAliass
entryRuleAliass
:
{ before(grammarAccess.getAliassRule()); }
	 ruleAliass
{ after(grammarAccess.getAliassRule()); } 
	 EOF 
;

// Rule Aliass
ruleAliass 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAliassAccess().getGroup()); }
		(rule__Aliass__Group__0)
		{ after(grammarAccess.getAliassAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotation
entryRuleAnnotation
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleAnnotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule Annotation
ruleAnnotation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationAccess().getGroup()); }
		(rule__Annotation__Group__0)
		{ after(grammarAccess.getAnnotationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnnotationDetail
entryRuleAnnotationDetail
:
{ before(grammarAccess.getAnnotationDetailRule()); }
	 ruleAnnotationDetail
{ after(grammarAccess.getAnnotationDetailRule()); } 
	 EOF 
;

// Rule AnnotationDetail
ruleAnnotationDetail 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAnnotationDetailAccess().getGroup()); }
		(rule__AnnotationDetail__Group__0)
		{ after(grammarAccess.getAnnotationDetailAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObjectName
entryRuleObjectName
:
{ before(grammarAccess.getObjectNameRule()); }
	 ruleObjectName
{ after(grammarAccess.getObjectNameRule()); } 
	 EOF 
;

// Rule ObjectName
ruleObjectName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObjectNameAccess().getSTRINGTerminalRuleCall()); }
		RULE_STRING
		{ after(grammarAccess.getObjectNameAccess().getSTRINGTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getNameAssignment_0()); }
	(rule__Rule__NameAssignment_0)
	{ after(grammarAccess.getRuleAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getAlialistAssignment_2()); }
	(rule__Rule__AlialistAssignment_2)
	{ after(grammarAccess.getRuleAccess().getAlialistAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getAnnoinfoAssignment_3()); }
	(rule__Rule__AnnoinfoAssignment_3)?
	{ after(grammarAccess.getRuleAccess().getAnnoinfoAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Rule__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4()); }
	'}'
	{ after(grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Aliass__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group__0__Impl
	rule__Aliass__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getAliasKeyword_0()); }
	'alias'
	{ after(grammarAccess.getAliassAccess().getAliasKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group__1__Impl
	rule__Aliass__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAliassAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group__2__Impl
	rule__Aliass__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getAliassAssignment_2()); }
	(rule__Aliass__AliassAssignment_2)
	{ after(grammarAccess.getAliassAccess().getAliassAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getGroup_3()); }
	(rule__Aliass__Group_3__0)*
	{ after(grammarAccess.getAliassAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Aliass__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group_3__0__Impl
	rule__Aliass__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getOrKeyword_3_0()); }
	'or'
	{ after(grammarAccess.getAliassAccess().getOrKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Aliass__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAliassAccess().getAliassAssignment_3_1()); }
	(rule__Aliass__AliassAssignment_3_1)
	{ after(grammarAccess.getAliassAccess().getAliassAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAnnotationKeyword_0()); }
	'annotation'
	{ after(grammarAccess.getAnnotationAccess().getAnnotationKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getAnnotationAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__2__Impl
	rule__Annotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAnnotationNameAssignment_2()); }
	(rule__Annotation__AnnotationNameAssignment_2)
	{ after(grammarAccess.getAnnotationAccess().getAnnotationNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Annotation__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationAccess().getAnnodetailAssignment_3()); }
	(rule__Annotation__AnnodetailAssignment_3)?
	{ after(grammarAccess.getAnnotationAccess().getAnnodetailAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDetail__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationDetail__Group__0__Impl
	rule__AnnotationDetail__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationDetailAccess().getEqualsSignKeyword_0()); }
	'='
	{ after(grammarAccess.getAnnotationDetailAccess().getEqualsSignKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationDetail__Group__1__Impl
	rule__AnnotationDetail__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationDetailAccess().getGroup_1()); }
	(rule__AnnotationDetail__Group_1__0)*
	{ after(grammarAccess.getAnnotationDetailAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationDetail__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_2()); }
	(rule__AnnotationDetail__AnnosAssignment_2)
	{ after(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AnnotationDetail__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationDetail__Group_1__0__Impl
	rule__AnnotationDetail__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_1_0()); }
	(rule__AnnotationDetail__AnnosAssignment_1_0)
	{ after(grammarAccess.getAnnotationDetailAccess().getAnnosAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AnnotationDetail__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAnnotationDetailAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getAnnotationDetailAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Bimmodel__RulesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBimmodelAccess().getRulesRuleParserRuleCall_0()); }
		ruleRule
		{ after(grammarAccess.getBimmodelAccess().getRulesRuleParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getNameObjectNameParserRuleCall_0_0()); }
		ruleObjectName
		{ after(grammarAccess.getRuleAccess().getNameObjectNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AlialistAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getAlialistAliassParserRuleCall_2_0()); }
		ruleAliass
		{ after(grammarAccess.getRuleAccess().getAlialistAliassParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__AnnoinfoAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRuleAccess().getAnnoinfoAnnotationParserRuleCall_3_0()); }
		ruleAnnotation
		{ after(grammarAccess.getRuleAccess().getAnnoinfoAnnotationParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__AliassAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_2_0()); }
		RULE_IFCNAME
		{ after(grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Aliass__AliassAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_3_1_0()); }
		RULE_IFCNAME
		{ after(grammarAccess.getAliassAccess().getAliassIFCNAMETerminalRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnotationNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getAnnotationNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getAnnotationAccess().getAnnotationNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__AnnodetailAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationAccess().getAnnodetailAnnotationDetailParserRuleCall_3_0()); }
		ruleAnnotationDetail
		{ after(grammarAccess.getAnnotationAccess().getAnnodetailAnnotationDetailParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__AnnosAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_1_0_0()); }
		RULE_STRING
		{ after(grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AnnotationDetail__AnnosAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getAnnotationDetailAccess().getAnnosSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_IFCNAME : 'ifc' ('a'..'z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
